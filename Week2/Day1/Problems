public class RecursiveFunctions {
    /*
    Q1: Sum of first n natural numbers
    Steps:
    1. Base case: If n is 1, return 1
    2. Recursive case: Return n + sum(n-1)
    */
    public static int sum(int n) {
        if (n == 1) {
            return 1;
        }
        return n + sum(n - 1);
    }

    /*
    Q2: Multiply two numbers using recursion
    Steps:
    1. Base case: If b is 0, return 0
    2. Recursive case: Return a + mystery(a, b-1)
    */
    public static int mystery(int a, int b) {
        if (b == 0) {
            return 0;
        }
        return a + mystery(a, b - 1);
    }

    /*
    Q3: Sum of even numbers up to n
    Steps:
    1. Base case: If n is 0, return 0
    2. Recursive case: Return n + f(n-2)
    */
    public static int f(int n) {
        if (n == 0) {
            return 0;
        }
        return n + f(n - 2);
    }

    /*
    Q4: Print numbers from 1 to n
    Steps:
    1. Base case: If x is 0, return
    2. Recursive case: Call fun(x-1) then print x
    */
    public static void fun(int x) {
        if (x == 0) {
            return;
        }
        fun(x - 1);
        System.out.println(x);
    }

    /*
    Q5: Calculate factorial
    Steps:
    1. Base case: If n is 0, return 1
    2. Recursive case: Return n * fact(n-1)
    */
    public static int fact(int n) {
        if (n == 0) {
            return 1;
        }
        return n * fact(n - 1);
    }

    /*
    Q6: Fibonacci sequence
    Steps:
    1. Base case 1: If n is 0, return 0
    2. Base case 2: If n is 1, return 1
    3. Recursive case: Return fib(n-1) + fib(n-2)
    */
    public static int fib(int n) {
        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        }
        return fib(n - 1) + fib(n - 2);
    }

    /*
    Q7: Complex recursive function
    Steps:
    1. Base case: If n <= 1, return n
    2. Recursive case: Return fun(n-1) + fun(n-3)
    */
    public static int complexFun(int n) {
        if (n <= 1) {
            return n;
        }
        return complexFun(n - 1) + complexFun(n - 3);
    }

    /*
    Q8: Count recursive calls
    Steps:
    1. Base case: If n is 0, return 1 (counts the base case)
    2. Recursive case: Return 1 + double recursive calls to countCalls(n-1)
    */
    public static int countCalls(int n) {
        if (n == 0) {
            return 1;
        }
        return 1 + countCalls(n - 1) + countCalls(n - 1);
    }

    /*
    Q9: Sum of digits in a number
    Steps:
    1. Base case: If n is 0, return 0
    2. Recursive case: Return last digit + sumDigits(n/10)
    */
    public static int sumDigits(int n) {
        if (n == 0) {
            return 0;
        }
        return (n % 10) + sumDigits(n / 10);
    }

    /*
    Q10: Print numbers in ascending order using recursion
    Steps:
    1. Base case: If n is 0, return
    2. Recursive case: Call reversePrint(n-1) then print n
    */
    public static void reversePrint(int n) {
        if (n == 0) {
            return;
        }
        reversePrint(n - 1);
        System.out.println(n);
    }

    public static void main(String[] args) {
        System.out.println("Q1: sum(5) = " + sum(5)); // Output: 15
        System.out.println("Q2: mystery(3,4) = " + mystery(3,4)); // Output: 12
        System.out.println("Q3: f(6) = " + f(6)); // Output: 12
        System.out.println("Q4: fun(3)");
        fun(3); // Output: 1 2 3
        System.out.println("Q5: fact(4) = " + fact(4)); // Output: 24
        System.out.println("Q6: fib(6) = " + fib(6)); // Output: 8
        System.out.println("Q7: complexFun(5) = " + complexFun(5)); // Output: 4
        System.out.println("Q8: countCalls(3) = " + countCalls(3)); // Output: 7
        System.out.println("Q9: sumDigits(1234) = " + sumDigits(1234)); // Output: 10
        System.out.println("Q10: reversePrint(3)");
        reversePrint(3); // Output: 1 2 3
    }
}
